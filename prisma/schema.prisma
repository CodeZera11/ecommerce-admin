// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
   userId   String
   name     String
   billboards Billboard[]
   categories Category[]
   sizes      Size[]
   colors     Color[]
   products   Product[]
   orders     Order[]
   createdAt  DateTime @default(now())
   updatedAt  DateTime @updatedAt
}

model Billboard {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String @db.ObjectId
  store     Store     @relation(fields: [storeId], references: [id])
  label     String
  images    Image[]
  category  Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  storeId      String   @db.ObjectId
  store        Store    @relation(fields: [storeId], references: [id])
  billboardId  String   @db.ObjectId
  billboard    Billboard @relation(fields: [billboardId], references: [id])
  name         String
  products     Product[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Size {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId
  store       Store @relation(fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Color {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId
  store       Store @relation(fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId
  store       Store @relation(fields: [storeId], references: [id])
  categoryId  String @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  name        String
  price       Float
  sizeId      String @db.ObjectId
  size        Size @relation(fields: [sizeId], references: [id])
  colorId     String @db.ObjectId
  color       Color @relation(fields: [colorId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  isFeatured  Boolean @default(false)
  isArchived Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  productId  String? @db.ObjectId
  product    Product? @relation(fields: [productId], references: [id], onDelete:Cascade)
  billboardId String? @db.ObjectId
  billboard   Billboard? @relation(fields: [billboardId], references: [id], onDelete:Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  orderItems  OrderItem[]
  storeId     String @db.ObjectId
  store       Store @relation(fields: [storeId], references: [id])
  isPaid      Boolean @default(false)
  address     String  @default("")
  phone       String  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  order     Order  @relation(fields: [orderId], references: [id])
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}